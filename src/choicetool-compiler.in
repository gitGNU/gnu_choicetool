#! @PERL@

#
# choicetool-compiler
#
# Copyright (C) 2007, 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

eval 'case $# in 0) exec @PERL@ -S "$0";; *) exec @PERL@ -S "$0" "$@";; esac'
    if 0;

use File::Spec;

BEGIN
{
    # Retrieve our perl libraries path
    my $perllibdir;

    $perllibdir = defined($ENV{'CHOICETOOL_LIBRARY_PATH'}) ?
	$ENV{'CHOICETOOL_LIBRARY_PATH'} : '@pkgvlibsdir@';

    unshift(@INC, map(File::Spec->catfile($_, "perl"),
		      (split '@PATH_SEPARATOR@', $perllibdir)));

    # Override SHELL.  This is required on DJGPP so that system() uses
    # bash, not COMMAND.COM which doesn't quote arguments properly.
    # Other systems aren't expected to use $SHELL when Automake
    # runs, but it should be safe to drop the `if DJGPP' guard if
    # it turns up other systems need the same thing.  After all,
    # if SHELL is used, ./configure's SHELL is always better than
    # the user's SHELL (which may be something like tcsh).
    $ENV{'SHELL'} = '@SHELL@' if exists $ENV{'DJGPP'};
}

#
# Misc
#

use strict;
use warnings;
use diagnostics;

use Data::Dumper;

use Choicetool::Autoconfig;
use Choicetool::Base::Trace;
use Choicetool::Base::Debug;
use Choicetool::Base::Program;
use Choicetool::Base::Options;
use Choicetool::OS::File;
use Choicetool::OS::String;
use Choicetool::OS::Home;
use Choicetool::OS::Environment;
use Choicetool::Data::Tree;
use Choicetool::UI::Menu;
use Choicetool::Compile;

#
# Globals
#

our $PROGRAM_NAME = "choicetool-compiler";

my $OUTBASE = "choose";
my $DFLTIN  = $OUTBASE . ".pa";
my $DFLTOUT = $OUTBASE . ".co";

sub help ()
{
    print "Usage: $PROGRAM_NAME [OPTIONS]\n";
    print "\n";
    print "Generate an interactive configuration script from an input file if\n";
    print "given, or \`$DFLTIN' if present. Output is sent to the output file\n";
    print "if it is given, otherwise into \`$DFLTOUT'.\n";
    print "\n";
    print "  -i, --input=FILE           get input from FILE\n";
    print "  -o, --output=FILE          output to file FILE\n";
    print "  -W, --warnings=CATEGORY    report the warnings falling in CATEGORY\n";
    print "  -d, --debug                run in debugging mode\n";
    print "  -v, --verbose              verbose mode\n";
    print "  -h, --help                 print this help, then exit\n";
    print "  -V, --version              print version number, then exit\n";
    print "\n";
    print "The environment variable CHOICETOOL_LIBRARY_PATH is honored.\n";
    print "\n";
    print "Report bugs to <$PACKAGE_BUGREPORT>\n";
}

sub tree_walker ($$$)
{
    my $level      = shift;
    my $node_ref   = shift;
    my $string_ref = shift;

    debug("Running tree-walker for node reference " . $node_ref);

    assert(defined($node_ref));
    assert(defined($string_ref));

    my $node;

    $node = ${$node_ref};
    assert(defined($node));


    debug("Handling interface data");

    my $object;
    $object = $node->data("INTERFACE");
    if (defined($object)) {

	debug("Node " . $node_ref . " data is: \`" . $object . "'");

	${$string_ref} = ${$string_ref} . $object->stringize("  " x $level);

    } else {
	debug("Node " . $node_ref . " has no object data")
    }

    debug("Handling node children");

    my @children;
    @children = $node->children();

    debug("Node " . $node_ref . " has " . ($#children + 1) . " children");

    $level++;
    for my $child_ref (@children) {
	debug("Analyzing child reference " . $child_ref);
	assert(defined($child_ref));

	if (!&tree_walker($level, $child_ref, $string_ref)) {
	    return 0;
	}
    }

    debug("Tree-walking for node reference " . $node_ref . " completed");

    return 1;
}

#
# Main
#

trace_prefix_set($PROGRAM_NAME);

my $input_file   = "";
my $output_file  = "";
my $force_mode   = 0;
my $dry_run      = 0;
my $run          = 1;

debug_set(0);
verbose_set(0);
warning_set("none");

my $options = Choicetool::Base::Options->new();
assert(defined($options));

my @options_list = (
    [ "i", "input",    sub { $input_file = $_[0];          return 1; }, 1, 1 ],
    [ "o", "output",   sub { $output_file = $_[0];         return 1; }, 1, 1 ],
    [ "n", "dry-run",  sub { $dry_run = 1;                 return 1; }, 0, 0 ],
    [ "f", "force",    sub { $force_mode = 1;              return 1; }, 0, 0 ],
    [ "W", "warnings", sub { warning_set($_[0]);           return 1; }, 1, 1 ],
    [ "d", "debug",    sub { debug_set(1);                 return 1; }, 0, 0 ],
    [ "v", "verbose",  sub { verbose_set(1);               return 1; }, 0, 0 ],
    [ "h", "help",     sub { help();             $run = 0; return 1; }, 0, 0 ],
    [ "V", "version",  sub { version();          $run = 0; return 1; }, 0, 0 ],
    );

if (!$options->config(\@options_list)) {
    bug("Options configuration problem");
}

my @options_slack = @ARGV;
if(!$options->parse(\@options_slack)) {
    hint("Option parsing failed");
    exit 1;
}

debug("Running \`" . $PROGRAM_NAME . "' version \`" . $PACKAGE_VERSION . "'");

#
# Parameters check
#

if (!$run) {
    exit 0;
}

if ($input_file eq "") {
    $input_file = $DFLTIN;
}

if ($output_file eq "") {
    $output_file = $DFLTOUT;
}

if (!file_ispresent($input_file)) {
    error("Input file \`" . $input_file . "' is missing");
    exit 1;
}

assert(defined($input_file));
assert(defined($output_file));

##
## Dump the environment, useful for debugging purposes
##
#{
#    sub callback ($$) {
#        my $key   = shift;
#        my $value = shift;
#
#        if (!defined($key)) {
#            $key = "undef";
#        }
#        if (!defined($value)) {
#            $value = "undef";
#        }
#        debug("Environment `" . $key . "' = `" . $value . "'")
#    }
#    environment_foreach(\&callback)
#}

#
# Melt the parsed data structure
#

my %data;
my $string;

$string = "";
if (!file_tostring($input_file, \$string)) {
    exit 1;
}

debug("Cross your fingers, we're starting evaluation");


# XXX FIXME: We should use the former version of 'eval' ...
#eval {
#   no warnings 'all';
#   $string;
#};
eval $string;
if ($@) {
    debug("Evaluation returned `" . $@ . "'");
    error("Bad configuration frozen in \`" . $input_file . "' ($@)");
    return 0;
}

# Pack tree data
debug("Packing input tree");
$data{TREE}->pack();

#
# Compile the input file
#

my $output_string;

$output_string = "";

# First of all we need to include the m4 library
$output_string = $output_string . "m4_include(\`choicetool.m4')\n";

# Then we can start using our macros
$output_string = $output_string . "_CT_HEADER([])\n";
if (!tree_walker(0, \$data{TREE}, \$output_string)) {
    exit 1;
}
$output_string = $output_string . "_CT_FOOTER([])\n";

#
# Write output file at last
#

if ($dry_run) {
    exit 0;
}

if (!string_tofile($output_string, $output_file)) {
    exit 1;
}

exit 0;
