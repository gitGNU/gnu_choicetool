#! @PERL@

#
# choicetool
#
# Copyright (C) 2007, 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

eval 'case $# in 0) exec @PERL@ -S "$0";; *) exec @PERL@ -S "$0" "$@";; esac'
    if 0;

use File::Spec;

BEGIN
{
    # Retrieve our perl libraries path
    my $perllibdir;

    $perllibdir = defined($ENV{'CHOICETOOL_LIBRARY_PATH'}) ?
	$ENV{'CHOICETOOL_LIBRARY_PATH'} : '@pkgvlibsdir@';

    unshift(@INC, map(File::Spec->catfile($_, "perl"),
		      (split '@PATH_SEPARATOR@', $perllibdir)));

    # Override SHELL.  On DJGPP SHELL may not be set to a shell
    # that can handle redirection and quote arguments correctly,
    # e.g.: COMMAND.COM.  For DJGPP always use the shell that configure
    # has detected.
    $ENV{'SHELL'} = '@SHELL@' if ($^O eq 'dos');
}

#
# Misc
#

use strict;
use warnings;
use diagnostics;

use Choicetool::Autoconfig;
use Choicetool::Base::Trace;
use Choicetool::Base::Debug;
use Choicetool::Base::Program;
use Choicetool::Base::Options;
use Choicetool::OS::File;
use Choicetool::OS::String;
use Choicetool::OS::Home;
use Choicetool::OS::Environment;
use Choicetool::OS::Shell;

#
# Globals
#

our $PROGRAM_NAME = "choicetool";

my $OUTBASE = "choose";
my $DFLTIN  = $OUTBASE . ".ct";
my $DFLTOUT = $OUTBASE . ".in";

my $input_file        = $DFLTIN;
#my $input_file        = File::Spec->catfile(File::Spec->curdir(),"choose.ct");

my $preprocessed_file = File::Spec->catfile(File::Spec->curdir(), "choose.pp");
my $parsed_file       = File::Spec->catfile(File::Spec->curdir(), "choose.pa");
my $compiled_file     = File::Spec->catfile(File::Spec->curdir(), "choose.co");

my $output_file       = $DFLTOUT;
#my $output_file       = File::Spec->catfile(File::Spec->curdir(),"choose.in");

my %tools = (
    "preprocess" => {
        HANDLER        => "choicetool-preprocessor",
        DESCRIPTION    => "preprocess",
        FLAGS          =>
	    "-i %input_file% " .
	    "-o %preprocessed_file%",
        PRE_REQUISITE  => [ ],
        POST_REQUISITE => [ ],
    },
    "parse" => {
        HANDLER        => "choicetool-parser",
        DESCRIPTION    => "parse",
        FLAGS          =>
	    "-i %preprocessed_file% " .
	    "-o %parsed_file%",
        PRE_REQUISITE  => [ "preprocess" ],
        POST_REQUISITE => [ ],
    },
    "compile" => {
        HANDLER        => "choicetool-compiler",
        DESCRIPTION    => "compile",
        FLAGS          =>
	    "-i %parsed_file% " .
	    "-o %compiled_file%",
        PRE_REQUISITE  => [ "preprocess",
			    "parse" ],
        POST_REQUISITE => [ ],
    },
    "link" => {
        HANDLER        => "choicetool-linker",
        DESCRIPTION    => "link",
        FLAGS          =>
	    "-i %compiled_file% " .
	    "-o %output_file%",
        PRE_REQUISITE  => [ "preprocess",
			    "parse",
			    "compile" ],
        POST_REQUISITE => [ ],
    },
    );

sub help ()
{
    print "Usage: $PROGRAM_NAME [OPTIONS]... [-- [MODE-ARG]...]\n";
    print "\n";
    print "Generate an interactive configuration script from an input file if\n";
    print "given, or \`$DFLTIN' if present. Output is sent to the output file\n";
    print "if it is given, otherwise into \`$DFLTOUT'.\n";
    print "\n";
    print "  -i, --input=FILE           get input from FILE\n";
    print "  -o, --output=FILE          output to file FILE\n";
    print "  -n, --dry-run              display commands without modifying any files\n";
    print "  -W, --warnings=CATEGORY    report the warnings falling in CATEGORY\n";
    print "  -d, --debug                run in debugging mode\n";
    print "  -v, --verbose              verbose mode\n";
    print "  -h, --help                 print this help, then exit\n";
    print "  -V, --version              print version number, then exit\n";
    print "\n";
    print "Warning categories include:\n";
    print "  \`all'                      all the warnings\n";
    print "  \`none'                     turn off all the warnings\n";
    print "\n";

    print "MODE must be one of the following:\n";
    for my $tool (keys(%tools)) {
	assert(defined($tools{$tool}{DESCRIPTION}));

	printf("        %-11s          %-s\n",
	       $tool,
	       $tools{$tool}{DESCRIPTION});
    }
    print "\n";

    print "MODE-ARGS vary depending on the MODE.  Try \`" . $PROGRAM_NAME. " --help MODE' for a\n";
    print "more detailed description of MODE.\n";
    print "\n";

    print "The environment variable CHOICETOOL_LIBRARY_PATH is honored.\n";
    print "\n";
    print "Report bugs to <$PACKAGE_BUGREPORT>\n";
}

sub run_tool ($$@)
{
    my $tool    = shift;
    my $dry_run = shift;
    my @args    = @_;

    assert(defined($tool));
    assert(defined($dry_run));

    verbose("Running \`" . $tool . "'");

    my $handler;

    $handler = $tools{$tool}{HANDLER};
    debug("Handler is `$handler'");
    assert(defined($handler));

    my $flags;

    $flags = $tools{$tool}{FLAGS} . " @args";
    debug("Flags are `$flags'");
    assert(defined($flags));

    my $command;

    $command = File::Spec->catfile($bin_dir, $handler) . " " . $flags;

    if ($dry_run) {
        print $command . "\n";
        return 1;
    }

    if (!shell_execute($command)) {
        return 0;
    }

    return 1;
}

sub help_mode ($)
{
    my $mode = shift;

    if (defined($mode)) {
	debug("Producing help for mode \`" . $mode . "'");
	my $found;

	# Yes, let us provide help for that mode
	debug("Mode should be \`" . $mode . "'");
	$found = 0;
	for my $tool (keys(%tools)) {
	    debug("Tool = \`" . $tool . "'");
	    if ($tool eq $mode) {
		debug("Got tool \`" . $tool . "' for the requested mode");
		$found = 1;
		last;
	    }
	}

	if (!$found) {
	    error("Unknown MODE \`" . $mode . "'");
	    return 0;
	}

	if (!run_tool($mode, 0, "-h")) {
	    error("Cannot get help for MODE \`" . $mode . "'");
	    return 0;
	}
    } else {
	debug("Mode is not defined, producing generic help");
	# No, let us provide the generic help
	help();
    }

    return 1;
}

#
# Main
#

trace_prefix_set($PROGRAM_NAME);

#my $input_file  = "";
#my $output_file = "";
my $running_mode = "link";
my $force_mode   = 0;
my $dry_run      = 0;
my $run          = 1;

debug_set(0);
verbose_set(0);
warning_set("none");

my $options = Choicetool::Base::Options->new();
assert(defined($options));

my @options_list = (
    [ "M", "mode",     sub { $running_mode = $_[0];      return 1; }, 1 ],
    [ "i", "input",    sub { $input_file = $_[0];        return 1; }, 1 ],
    [ "o", "output",   sub { $output_file = $_[0];       return 1; }, 1 ],
    [ "n", "dry-run",  sub { $dry_run = 1;               return 1; }, 0 ],
    [ "f", "force",    sub { $force_mode = 1;            return 1; }, 0 ],
    [ "W", "warnings", sub { warning_set($_[0]);         return 1; }, 1 ],
    [ "d", "debug",    sub { debug_set(1);               return 1; }, 0 ],
    [ "v", "verbose",  sub { verbose_set(1);             return 1; }, 0 ],
    [ "h", "help",     sub {
	$run = 0; return (help_mode($_[0]) ? 1 : -1);              }, 2 ],
    [ "V", "version",  sub { version();        $run = 0; return 0; }, 0 ],
    );

if (!$options->config(\@options_list)) {
    bug("Options configuration problem (" . $options->strerror() . ")");
}
if (!$options->parse(\@ARGV)) {
    assert(defined($options->strerror()));
    hint($options->strerror());
    exit 1;
}

my @options_slack;

assert($options->{OPTIND} >= 0);
@options_slack = @ARGV[$options->{OPTIND} .. $#ARGV];

debug("Running \`" . $PROGRAM_NAME . "' version \`" . $PACKAGE_VERSION . "'");

#
# Parameters check
#

if (!$run) {
    exit 0;
}

#
# Fixup tools flags
#
for my $tool (keys(%tools)) {
    my $string;

    $string = $tools{$tool}->{FLAGS};
    assert(defined($string));

    $string = string_replace_many($string, {
	"%input_file%"        => $input_file,
	"%preprocessed_file%" => $preprocessed_file,
	"%parsed_file%"       => $parsed_file,
	"%compiled_file%"     => $compiled_file,
	"%output_file%"       => $output_file});

    assert(defined($string));
    $tools{$tool}->{FLAGS} = $string;
}

#
# Some checks
#

if (!defined($running_mode)) {
    hint("Missing running mode");
    exit 1;
}

debug("Mode should be \`" . $running_mode . "'");
my $found = 0;
for my $tool (keys(%tools)) {
    debug("Tool = \`" . $tool . "'");
    if ($running_mode eq $tool) {
	debug("Got tool \`" . $tool . "' for the requested mode");
	$found = 1;
	last;
    }
}
if (!$found) {
    error("Unknown option \`" . $running_mode . "'");
    exit 1;
}

debug("Running mode is \`$running_mode'");

#
# Setup flags (used later on)
#

{
    debug("Handling flags");

    my $flags = "";

    if (verbose_get() != 0) {
        $flags = "-v $flags";
    }
    if (debug_get() != 0) {
        $flags = "-d $flags";
    }
    if ($force_mode != 0) {
        $flags = "$flags -f";
    }
    $flags = "-W " . warning_get() . " " . $flags;

    debug("Inherited flags are \`" . $flags . "'");

    debug("Changing per-tool flags:");
    for my $tool (keys(%tools)) {
        debug("Tool "                          .
              "\`" . $tool . "' "              .
              "flags are "                     .
              "\`" . $tools{$tool}{FLAGS} . "'");

        assert(defined($tools{$tool}{FLAGS}));
        $tools{$tool}{FLAGS} = $flags . " " . $tools{$tool}{FLAGS};

        debug("Modified flags  for tool "      .
              "\`" . $tool . "' "              .
              "are "                           .
              "\`" . $tools{$tool}{FLAGS} . "'");
    }
}

##
## Dump the environment, useful for debugging purposes
##
#
#{
#    sub callback ($$) {
#        my $key   = shift;
#        my $value = shift;
#
#        if (!defined($key)) {
#            $key = "undef";
#        }
#        if (!defined($value)) {
#            $value = "undef";
#        }
#        debug("Environment `" . $key . "' = `" . $value . "'")
#    }
#    environment_foreach(\&callback)
#}

#
# Start the real work by running the tool-chain
#

my @tools_chain;

# Pre-requisites first
for my $tool (@{$tools{$running_mode}{PRE_REQUISITE}}) {
    assert(defined($tool));
    push(@tools_chain, $tool);
}

# The requested tool
push(@tools_chain, $running_mode);

# Post-requisites last
for my $tool (@{$tools{$running_mode}{POST_REQUISITE}}) {
    assert(defined($tool));
    push(@tools_chain, $tool);
}

debug("Tools chain is \`@tools_chain'");
assert($#tools_chain >= 0);

for my $tool (@tools_chain) {
    if (!run_tool($tool, $dry_run, @options_slack)) {
	exit 1;
    }
}

exit 0;
