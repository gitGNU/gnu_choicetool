#! @PERL@

#
# choicetool
#
# Copyright (C) 2007, 2008 Francesco Salvestrini
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

eval 'case $# in 0) exec @PERL@ -S "$0";; *) exec @PERL@ -S "$0" "$@";; esac'
    if 0;

use File::Spec;

BEGIN
{
    # Retrieve our perl libraries path
    my $perllibdir;

    $perllibdir = defined($ENV{'CHOICETOOL_LIBRARY_PATH'}) ?
	$ENV{'CHOICETOOL_LIBRARY_PATH'} : '@pkgvlibsdir@';

    unshift(@INC, map(File::Spec->catfile($_, "perl"),
		      (split '@PATH_SEPARATOR@', $perllibdir)));

    # Override SHELL.  This is required on DJGPP so that system() uses
    # bash, not COMMAND.COM which doesn't quote arguments properly.
    # Other systems aren't expected to use $SHELL when Automake
    # runs, but it should be safe to drop the `if DJGPP' guard if
    # it turns up other systems need the same thing.  After all,
    # if SHELL is used, ./configure's SHELL is always better than
    # the user's SHELL (which may be something like tcsh).
    $ENV{'SHELL'} = '@SHELL@' if exists $ENV{'DJGPP'};
}

#
# Misc
#

use strict;
use warnings;
use diagnostics;

use Choicetool::Autoconfig;
use Choicetool::Base::Trace;
use Choicetool::Base::Debug;
use Choicetool::Base::Program;
use Choicetool::Base::Options;
use Choicetool::OS::File;
use Choicetool::OS::String;
use Choicetool::OS::Home;
use Choicetool::OS::Environment;
use Choicetool::OS::Shell;

#
# Globals
#

our $PROGRAM_NAME = "choicetool";

my $OUTBASE = "choose";
my $DFLTIN  = $OUTBASE . ".ct";
my $DFLTOUT = $OUTBASE . ".in";

my $input_file        = $DFLTIN; #File::Spec->catfile(File::Spec->curdir(), "choose.ct");
my $preprocessed_file = File::Spec->catfile(File::Spec->curdir(), "choose.pp");
my $parsed_file       = File::Spec->catfile(File::Spec->curdir(), "choose.pa");
my $compiled_file     = File::Spec->catfile(File::Spec->curdir(), "choose.co");
my $output_file       = $DFLTOUT; #File::Spec->catfile(File::Spec->curdir(), "choose.in");

my %tools = (
    "preprocess" => {
        HANDLER        => "choicetool-preprocessor",
        DESCRIPTION    => undef,
        FLAGS          => "-i $input_file -o $preprocessed_file",
        PRE_REQUISITE  => [ ],
        POST_REQUISITE => [ ],
    },
    "parse" => {
        HANDLER        => "choicetool-parser",
        DESCRIPTION    => undef,
        FLAGS          => "-i $preprocessed_file -o $parsed_file",
        PRE_REQUISITE  => [ ],
        POST_REQUISITE => [ ],
    },
    "compile" => {
        HANDLER        => "choicetool-compiler",
        DESCRIPTION    => undef,
        FLAGS          => "-i $parsed_file -o $compiled_file",
        PRE_REQUISITE  => [ ],
        POST_REQUISITE => [ ],
    },
    "link" => {
        HANDLER        => "choicetool-linker",
        DESCRIPTION    => undef,
        FLAGS          => "-i $compiled_file -o $output_file",
        PRE_REQUISITE  => [ ],
        POST_REQUISITE => [ ],
    },
    );

sub help ()
{
    print "Usage: $PROGRAM_NAME [OPTIONS]\n";
    print "\n";
    print "Generate an interactive configuration script from an input file if\n";
    print "given, or \`$DFLTIN' if present. Output is sent to the output file\n";
    print "if it is given, otherwise into \`$DFLTOUT'.\n";
    print "\n";
    print "  -i, --input=FILE           get input from FILE\n";
    print "  -o, --output=FILE          output to file FILE\n";
    print "  -n, --dry-run              display commands without modifying any files\n";
    print "  -W, --warnings=CATEGORY    report the warnings falling in CATEGORY\n";
    print "  -d, --debug                run in debugging mode\n";
    print "  -v, --verbose              verbose mode\n";
    print "  -h, --help                 print this help, then exit\n";
    print "  -V, --version              print version number, then exit\n";
    print "\n";
    print "The environment variable CHOICETOOL_LIBRARY_PATH is honored.\n";
    print "\n";
    print "Report bugs to <$PACKAGE_BUGREPORT>\n";
}

sub run_tool ($$@)
{
    my $tool    = shift;
    my $dry_run = shift;
    my @args    = @_;

    assert(defined($tool));
    assert(defined($dry_run));

    verbose("Running \`" . $tool . "'");

    my $handler;

    $handler = $tools{$tool}{HANDLER};
    debug("Handler is `$handler'");
    assert(defined($handler));

    my $flags;

    $flags = $tools{$tool}{FLAGS} . " @args";
    debug("Flags are `$flags'");
    assert(defined($flags));

    my $command;

    $command = File::Spec->catfile($bin_dir, $handler) . " " . $flags;

    if ($dry_run) {
        print $command . "\n";
        return 1;
    }

    if (!shell_execute($command)) {
        return 0;
    }

    return 1;
}

#
# Main
#

trace_prefix_set($PROGRAM_NAME);

#my $input_file  = "";
#my $output_file = "";
my $running_mode = "";
my $force_mode   = 0;
my $dry_run      = 0;
my $run          = 0;

debug_set(0);
verbose_set(0);
warning_set("none");

my $options = Choicetool::Base::Options->new();
assert(defined($options));

my @options_list = (
    [ "i", "input",
      sub { $input_file = $_[0];                 $run = 1; return 1; },
      1,   1 ],
    [ "o", "output",
      sub { $output_file = $_[0];                $run = 1; return 1; },
      1,   1 ],

    [ "n", "dry-run",  sub { $dry_run = 1;       $run = 1; return 1; }, 0, 0 ],
    [ "f", "force",    sub { $force_mode = 1;    $run = 1; return 1; }, 0, 0 ],
    [ "W", "warnings", sub { warning_set($_[0]); $run = 1; return 1; }, 1, 1 ],
    [ "d", "debug",    sub { debug_set(1);       $run = 1; return 1; }, 0, 0 ],
    [ "v", "verbose",  sub { verbose_set(1);     $run = 1; return 1; }, 0, 0 ],
    [ "h", "help",     sub { help();             $run = 0; return 1; }, 0, 0 ],
    [ "V", "version",  sub { version();          $run = 0; return 1; }, 0, 0 ],
    );

if (!$options->config(\@options_list)) {
    bug("Options configuration problem");
}

my @options_slack = @ARGV;
if(!$options->parse(\@options_slack)) {
    hint("Option parsing failed");
    exit 1;
}

debug("Running \`" . $PACKAGE_NAME . "' version \`" . $PACKAGE_VERSION . "'");

#
# Parameters check
#

if (!$run) {
    exit 0;
}

#
# Setup flags (used later on)
#
{
    debug("Handling flags");

    my $flags = "";

    if (verbose_get() != 0) {
        $flags = "-v $flags";
    }
    if (debug_get() != 0) {
        $flags = "-d $flags";
    }
    if ($force_mode != 0) {
        $flags = "$flags -f";
    }
    $flags = "-W " . warning_get() . " " . $flags;

    debug("Inherited flags are \`" . $flags . "'");

    debug("Changing per-tool flags:");
    for my $tool (keys(%tools)) {
        debug("Tool "                          .
              "\`" . $tool . "' "              .
              "flags are "                     .
              "\`" . $tools{$tool}{FLAGS} . "'");

        assert(defined($tools{$tool}{FLAGS}));
        $tools{$tool}{FLAGS} = $flags . " " . $tools{$tool}{FLAGS};

        debug("Modified flags  for tool "      .
              "\`" . $tool . "' "              .
              "are "                           .
              "\`" . $tools{$tool}{FLAGS} . "'");
    }
}

##
## Dump the environment, useful for debugging purposes
##
#{
#    sub callback ($$) {
#        my $key   = shift;
#        my $value = shift;
#
#        if (!defined($key)) {
#            $key = "undef";
#        }
#        if (!defined($value)) {
#            $value = "undef";
#        }
#        debug("Environment `" . $key . "' = `" . $value . "'")
#    }
#    environment_foreach(\&callback)
#}

#
# Run the tool-chain
#
if (!run_tool("preprocess", $dry_run, @options_slack)) {
    exit 1;
}
if (!run_tool("parse",      $dry_run, @options_slack)) {
    exit 1;
}
if (!run_tool("compile",    $dry_run, @options_slack)) {
    exit 1;
}
if (!run_tool("link",       $dry_run, @options_slack)) {
    exit 1;
}

exit 0;
